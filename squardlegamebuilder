
import pickle
import random
import string

class TrieNode:
    def __init__(self):
        #Initialize a trie node with children and end-of-word marker.
        self.children = {}  # Dictionary to store child nodes (key: letter, value: TrieNode)
        self.is_end_of_word = False  # Indicates if this node marks the end of a word

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        #Insert a word into the trie.
        node = self.root
        for letter in word:
            if letter not in node.children:
                node.children[letter] = TrieNode()  # Create a new node if letter is not in children
            node = node.children[letter]
        node.is_end_of_word = True  # Mark the end of the word

    def search(self, prefix):
        #Search for a prefix in the trie.
        node = self.root
        for letter in prefix:
            if letter not in node.children:
                return False, False  # Prefix does not exist
            node = node.children[letter]
        return node.is_end_of_word, bool(node.children)  # Check if it's a word and/or has children

    @staticmethod
    def load(filename):
        #Load a trie from a file.
        with open(filename, 'rb') as f:
            return pickle.load(f)


class SquaredleSolver:
    def __init__(self, matrix, trie):
        self.matrix = matrix  # The 4x4 matrix of letters
        self.trie = trie  # The Trie object containing valid words
        self.words_found = set()  # Set to store the words found

        self.visited = [[False for _ in range(5)] for _ in range(5)]  # 4x4 visited grid to track letters

    # Directions for neighbors (horizontal, vertical, and diagonal)
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1),  # Up, Down, Left, Right
                  (-1, -1), (-1, 1), (1, -1), (1, 1)]  # Diagonals

    def dfs(self, row, col, current_word):
        #Perform DFS to search for valid words in the matrix.
        # Check if the current word is valid and has at least 4 characters
        is_word, has_children = self.trie.search(current_word)
        if len(current_word) >= 4:
            if is_word and current_word not in self.words_found:
                self.words_found.add(current_word)

        # If there are no children for the current word, stop searching further
        if not has_children:
            return

        # Explore neighbors
        for dr, dc in self.directions:
            new_row, new_col = row + dr, col + dc
            # Check if the new position is within bounds and not visited
            if 0 <= new_row < 5 and 0 <= new_col < 5 and not self.visited[new_row][new_col]:
                self.visited[new_row][new_col] = True
                # Recursively search from the neighbor
                self.dfs(new_row, new_col, current_word + self.matrix[new_row][new_col])
                self.visited[new_row][new_col] = False  # Unmark the cell after visiting

    def solve(self):
        #Solve the Squaredle puzzle by searching all possible words.
        for row in range(5):
            for col in range(5):
                # Start DFS from each letter in the matrix
                self.visited[row][col] = True
                self.dfs(row, col, self.matrix[row][col])
                self.visited[row][col] = False

        return self.words_found

def generate_random_matrix(size=5, letter_weights=None):
    """Generate a random matrix of letters for Squaredle."""

    if letter_weights is None:
        # Default to equal weighting for all letters
        letter_weights = {chr(i): 1 for i in range(ord('a'), ord('z') + 1)}

    # Create a weighted pool of letters
    letter_pool = [letter for letter, weight in letter_weights.items() for _ in range(weight)]

    return [
        [random.choice(letter_pool) for _ in range(size)]
        for _ in range(size)
    ]


# Load the trie from the saved file
trie = Trie.load('smalllistprefixtree.pkl')

 # Define letter weights (e.g., 'a' is 3x more likely, 'x' is 1/3 as likely)
custom_weights = {
    'a': 70,
    'h': 25,
    'e': 100,
    'd': 30,
    'i': 81,
    'n': 59,
    'g': 22,
    's': 79,
    'l': 46,
    'm': 27,
    'o': 65,
    't': 59,
    'y': 16,
    'r': 60,
    'v': 7,
    'k': 6,
    'w': 5,
    'f': 10,
    'b': 16,
    'c': 38,
    'x': 3,
    'u': 27,
    'p': 28,
    'z': 5,
    'j': 1,
    'q': 1,
}


# Generate a random matrix for Squaredle with custom weights
matrix = generate_random_matrix(size=5, letter_weights=custom_weights)
print("Random Squaredle Matrix:")
for row in matrix:
    print(row)


# Solve the Squaredle puzzle
solver = SquaredleSolver(matrix, trie)
found_words = solver.solve()

# Print the found words
print("Found " + str(len(found_words)) + " words:", sorted(found_words))

